openapi: '3.0.0'
info:
  title: Books API
  description: Books API documentation
  version: '2.0.0'
servers:
  - url: http://localhost:8000
    description: Local server
tags:
  - name: books
    description: Book storage, update, access and total price calculation
paths:
  /books:
    post:
      tags:
        - books
      operationId: createBook
      summary: Create new book
      description: Creates a new book entry
      requestBody:
        description: New book data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        201:
          description: Book record was successfully stored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          description: Request validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 400
                error: Bad Request
                message: "Validation failed for object='book'. Error count: 1"
                path: /books
                timestamp: '2017-01-12T14:36:09Z'
        409:
          description: Book with same barcode already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 409
                error: Conflict
                message: "Book with barcode 'bc000001' already exists"
                path: /books
                timestamp: '2017-01-12T14:00:00Z'
        500:
          description: The service is temporary unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 500
                error: Service Unavailable
                message: Database is temporary unavailable
                path: /books
                timestamp: '2017-01-12T14:00:00Z'
  /books/{barcode}:
    get:
      tags:
        - books
      operationId: getBook
      summary: Get book
      description: Get book with specified barcode
      parameters:
        - $ref: '#/components/parameters/barcode'
      responses:
        200:
          description: Book with requested barcode
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        404:
          description: Book with requested barcode was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 404
                error: Not Found
                message: "Book with barcode 'bc000001' was not found"
                path: /books/bc000001
                timestamp: '2017-01-12T14:00:00Z'
        500:
          description: The service is temporary unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 500
                error: Service Unavailable
                message: Database is temporary unavailable
                path: /books/bc000001
                timestamp: '2017-01-12T14:00:00Z'
    put:
      tags:
        - books
      operationId: updateBook
      summary: Update book
      description: Updates book
      parameters:
        - $ref: '#/components/parameters/barcode'
      requestBody:
        description: Updated book data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        200:
          description: Book was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          description: Request validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 400
                error: Bad Request
                message: "Validation failed for object='book'. Error count: 1"
                path: /books
                timestamp: '2017-01-12T14:36:09Z'
        404:
          description: Book with requested barcode was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 404
                error: Not Found
                message: "Book with barcode 'bc000001' was not found"
                path: /books/bc000001
                timestamp: '2017-01-12T14:00:00Z'
        500:
          description: The service is temporary unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 500
                error: Service Unavailable
                message: Database is temporary unavailable
                path: /books/bc000001
                timestamp: '2017-01-12T14:00:00Z'
    patch:
      tags:
        - books
      operationId: updateBookFields
      summary: Update book fields
      description: |
        Updates provided book fields. Any number of fields can be provided. Non-provided fields
        will not be updated.
      parameters:
        - $ref: '#/components/parameters/barcode'
      requestBody:
        description: Updated book fields
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookUpdate'
      responses:
        200:
          description: Book was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          description: Request validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 400
                error: Bad Request
                message: "Validation failed for object='book'. Error count: 1"
                path: /books
                timestamp: '2017-01-12T14:36:09Z'
        404:
          description: Book with requested barcode was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 404
                error: Not Found
                message: "Book with barcode 'bc000001' was not found"
                path: /books/bc000001
                timestamp: '2017-01-12T14:00:00Z'
        500:
          description: The service is temporary unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 500
                error: Service Unavailable
                message: Database is temporary unavailable
                path: /books/bc000001
                timestamp: '2017-01-12T14:00:00Z'
  /books/{barcode}/total-price:
    get:
      tags:
        - books
      operationId: getTotalPrice
      summary: Get total price
      description: |
        Get got total price of books with specified barcode. Price calculation depends on book
        type:<br>
        Regular book's price is calculated using formula
        <b>Total price = Quantity * Price</b>.<br>
        Antique book's price is calculated using formula
        <b>Total Price = Quantity * Price * (Current Year â€“ Release Year) / 10</b>.<br>
        Science journals's price is calculated using formula
        <b>Total Price = Quantity * Price * Science Index</b>.<br>

      parameters:
        - $ref: '#/components/parameters/barcode'
      responses:
        200:
          description: Total price of books with requested barcode
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotalPriceResponse'
        404:
          description: Book with requested barcode was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 404
                error: Not Found
                message: "Book with barcode 'bc000001' was not found"
                path: /books/bc000001
                timestamp: '2017-01-12T14:00:00Z'
        500:
          description: The service is temporary unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 500
                error: Service Unavailable
                message: Database is temporary unavailable
                path: /books/bc000001
                timestamp: '2017-01-12T14:00:00Z'

components:
  schemas:
    Error:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        path:
          type: string
    Book:
      type: object
      required:
        - barcode
        - name
        - author
        - quantity
        - price
      properties:
        barcode:
          description: Book ID field
          type: string
          example: bc000001
          minLength: 2
          maxLength: 255
        name:
          description: Name of a book
          type: string
          example: Book Name
          minLength: 2
          maxLength: 255
        author:
          description: Author of a book
          type: string
          example: Book Author
          minLength: 2
          maxLength: 255
        quantity:
          description: Quantity of books
          type: integer
          format: int32
          minimum: 1
          example: 5
        price:
          description: Price of book item
          type: number
          format: double
          minimum: 0
        antiqueReleaseYear:
          description: |
            Release year of antique book. This field should be set to antique books and
            should not be set to any other books. If field is set (not null), total book price is
            calculated different way. Can't be set (must be null) if scienceIndex field is set.
          type: integer
          example: 1547
          maximum: 1900
        scienceIndex:
          description: |
            Science index of science journal. This field should be set to science journals and
            should not be set to any other books. If field is set (not null), total book price is
            calculated different way. Can't be set (must be null) if antiqueReleaseYear field is set.
          type: integer
          example: 3
          minimum: 1
          maximum: 10
    BookUpdate:
      type: object
      properties:
        name:
          description: Name of a book
          type: string
          example: Book Name
          minLength: 2
          maxLength: 255
        author:
          description: Author of a book
          type: string
          example: Book Author
          minLength: 2
          maxLength: 255
        quantity:
          description: Quantity of books
          type: integer
          format: int32
          minimum: 1
          example: 5
        price:
          description: Price of book item
          type: number
          format: double
          minimum: 0
        antiqueReleaseYear:
          description: |
            Release year of antique book. This field should be set to antique books and
            should not be set to any other books. If field is set (not null), total book price is
            calculated different way. Can't be set (must be null) if scienceIndex field is set.
          type: integer
          example: 1547
          maximum: 1900
        scienceIndex:
          description: |
            Science index of science journal. This field should be set to science journals and
            should not be set to any other books. If field is set (not null), total book price is
            calculated different way. Can't be set (must be null) if antiqueReleaseYear field is set.
          type: integer
          example: 3
          minimum: 1
          maximum: 10
    TotalPriceResponse:
      type: object
      properties:
        price:
          type: number
          format: double
  parameters:
    barcode:
      name: barcode
      in: path
      description: ID of a book
      required: true
      schema:
        type: string
        example: bc000001
